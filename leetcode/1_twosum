class Solution {
    public:
     vector<int> twoSum(vector<int>& nums, int target) {
            vector<int> ans;
            int n = nums.size();
            for (int i = 0; i < n; i++) {
                for (int j = i + 1; j < n; j++) {
                    if (nums[i] + nums[j] == target) {
                        ans.push_back(i);
                        ans.push_back(j);
                        return ans;
                    }
                }
            }
            return ans; 
        }
    };

    // User function template for C++
// class Solution {
//   public:
//     bool twoSum(vector<int>& arr, int target) {
//         // code here
//         int n = arr.size();
//         for(int i=0; i<n; i++){
//             for (int j=i+1; j<n; j++){
//                 if(arr[i]+arr[j]==target){
//                  return true;
//                 }
//             }
//         }
     
//         return false;
//     }
// };

// class Solution {
// public:
//     bool twoSum(vector<int>& arr, int target) {
//         unordered_set<int> seen;
//         for (int num : arr) {
//             if (seen.count(target - num)) {
//                 return true;
//             }
//             seen.insert(num);
//         }
//         return false;
//     }
// };


// class Solution {
// public:
//     bool twoSum(vector<int>& arr, int target) {
//         sort(arr.begin(), arr.end()); // Sort the array first
//         int left = 0, right = arr.size() - 1;
        
//         while (left < right) {
//             int sum = arr[left] + arr[right];
//             if (sum == target) {
//                 return true;
//             } else if (sum < target) {
//                 left++;
//             } else {
//                 right--;
//             }
//         }
        
//         return false;
//     }
// };

class Solution {
    public:
        bool twoSum(vector<int>& arr, int target) {
            sort(arr.begin(), arr.end()); // Important Step
            
            int n = arr.size();
            int l = 0;
            int h = n - 1;
            
            while (l < h) {
                int csum = arr[l] + arr[h];
                if (csum == target) return true;
                else if (csum > target) h--;
                else l++;
            }
            return false;
        }
    };
    